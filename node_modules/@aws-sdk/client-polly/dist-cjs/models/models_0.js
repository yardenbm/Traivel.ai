"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SynthesizeSpeechOutputFilterSensitiveLog = exports.PutLexiconInputFilterSensitiveLog = exports.GetLexiconOutputFilterSensitiveLog = exports.LexiconFilterSensitiveLog = exports.TextLengthExceededException = exports.SsmlMarksNotSupportedForTextTypeException = exports.UnsupportedPlsLanguageException = exports.UnsupportedPlsAlphabetException = exports.MaxLexiconsNumberExceededException = exports.MaxLexemeLengthExceededException = exports.MarksNotSupportedForFormatException = exports.LexiconSizeExceededException = exports.LanguageNotSupportedException = exports.InvalidSsmlException = exports.InvalidSnsTopicArnException = exports.InvalidSampleRateException = exports.InvalidS3KeyException = exports.InvalidS3BucketException = exports.InvalidLexiconException = exports.SynthesisTaskNotFoundException = exports.InvalidTaskIdException = exports.TextType = exports.TaskStatus = exports.SpeechMarkType = exports.OutputFormat = exports.EngineNotSupportedException = exports.InvalidNextTokenException = exports.VoiceId = exports.Gender = exports.LanguageCode = exports.Engine = exports.ServiceFailureException = exports.LexiconNotFoundException = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
const PollyServiceException_1 = require("./PollyServiceException");
class LexiconNotFoundException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "LexiconNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "LexiconNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LexiconNotFoundException.prototype);
    }
}
exports.LexiconNotFoundException = LexiconNotFoundException;
class ServiceFailureException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "ServiceFailureException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceFailureException.prototype);
    }
}
exports.ServiceFailureException = ServiceFailureException;
exports.Engine = {
    NEURAL: "neural",
    STANDARD: "standard",
};
exports.LanguageCode = {
    ar_AE: "ar-AE",
    arb: "arb",
    ca_ES: "ca-ES",
    cmn_CN: "cmn-CN",
    cy_GB: "cy-GB",
    da_DK: "da-DK",
    de_AT: "de-AT",
    de_DE: "de-DE",
    en_AU: "en-AU",
    en_GB: "en-GB",
    en_GB_WLS: "en-GB-WLS",
    en_IE: "en-IE",
    en_IN: "en-IN",
    en_NZ: "en-NZ",
    en_US: "en-US",
    en_ZA: "en-ZA",
    es_ES: "es-ES",
    es_MX: "es-MX",
    es_US: "es-US",
    fi_FI: "fi-FI",
    fr_CA: "fr-CA",
    fr_FR: "fr-FR",
    hi_IN: "hi-IN",
    is_IS: "is-IS",
    it_IT: "it-IT",
    ja_JP: "ja-JP",
    ko_KR: "ko-KR",
    nb_NO: "nb-NO",
    nl_NL: "nl-NL",
    pl_PL: "pl-PL",
    pt_BR: "pt-BR",
    pt_PT: "pt-PT",
    ro_RO: "ro-RO",
    ru_RU: "ru-RU",
    sv_SE: "sv-SE",
    tr_TR: "tr-TR",
    yue_CN: "yue-CN",
};
exports.Gender = {
    Female: "Female",
    Male: "Male",
};
exports.VoiceId = {
    Aditi: "Aditi",
    Adriano: "Adriano",
    Amy: "Amy",
    Andres: "Andres",
    Aria: "Aria",
    Arlet: "Arlet",
    Arthur: "Arthur",
    Astrid: "Astrid",
    Ayanda: "Ayanda",
    Bianca: "Bianca",
    Brian: "Brian",
    Camila: "Camila",
    Carla: "Carla",
    Carmen: "Carmen",
    Celine: "Celine",
    Chantal: "Chantal",
    Conchita: "Conchita",
    Cristiano: "Cristiano",
    Daniel: "Daniel",
    Dora: "Dora",
    Elin: "Elin",
    Emma: "Emma",
    Enrique: "Enrique",
    Ewa: "Ewa",
    Filiz: "Filiz",
    Gabrielle: "Gabrielle",
    Geraint: "Geraint",
    Giorgio: "Giorgio",
    Gwyneth: "Gwyneth",
    Hala: "Hala",
    Hannah: "Hannah",
    Hans: "Hans",
    Hiujin: "Hiujin",
    Ida: "Ida",
    Ines: "Ines",
    Ivy: "Ivy",
    Jacek: "Jacek",
    Jan: "Jan",
    Joanna: "Joanna",
    Joey: "Joey",
    Justin: "Justin",
    Kajal: "Kajal",
    Karl: "Karl",
    Kazuha: "Kazuha",
    Kendra: "Kendra",
    Kevin: "Kevin",
    Kimberly: "Kimberly",
    Laura: "Laura",
    Lea: "Lea",
    Liam: "Liam",
    Liv: "Liv",
    Lotte: "Lotte",
    Lucia: "Lucia",
    Lupe: "Lupe",
    Mads: "Mads",
    Maja: "Maja",
    Marlene: "Marlene",
    Mathieu: "Mathieu",
    Matthew: "Matthew",
    Maxim: "Maxim",
    Mia: "Mia",
    Miguel: "Miguel",
    Mizuki: "Mizuki",
    Naja: "Naja",
    Niamh: "Niamh",
    Nicole: "Nicole",
    Ola: "Ola",
    Olivia: "Olivia",
    Pedro: "Pedro",
    Penelope: "Penelope",
    Raveena: "Raveena",
    Remi: "Remi",
    Ricardo: "Ricardo",
    Ruben: "Ruben",
    Russell: "Russell",
    Ruth: "Ruth",
    Salli: "Salli",
    Seoyeon: "Seoyeon",
    Sergio: "Sergio",
    Sofie: "Sofie",
    Stephen: "Stephen",
    Suvi: "Suvi",
    Takumi: "Takumi",
    Tatyana: "Tatyana",
    Thiago: "Thiago",
    Tomoko: "Tomoko",
    Vicki: "Vicki",
    Vitoria: "Vitoria",
    Zeina: "Zeina",
    Zhiyu: "Zhiyu",
};
class InvalidNextTokenException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
    }
}
exports.InvalidNextTokenException = InvalidNextTokenException;
class EngineNotSupportedException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "EngineNotSupportedException",
            $fault: "client",
            ...opts,
        });
        this.name = "EngineNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EngineNotSupportedException.prototype);
    }
}
exports.EngineNotSupportedException = EngineNotSupportedException;
exports.OutputFormat = {
    JSON: "json",
    MP3: "mp3",
    OGG_VORBIS: "ogg_vorbis",
    PCM: "pcm",
};
exports.SpeechMarkType = {
    SENTENCE: "sentence",
    SSML: "ssml",
    VISEME: "viseme",
    WORD: "word",
};
exports.TaskStatus = {
    COMPLETED: "completed",
    FAILED: "failed",
    IN_PROGRESS: "inProgress",
    SCHEDULED: "scheduled",
};
exports.TextType = {
    SSML: "ssml",
    TEXT: "text",
};
class InvalidTaskIdException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidTaskIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTaskIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTaskIdException.prototype);
    }
}
exports.InvalidTaskIdException = InvalidTaskIdException;
class SynthesisTaskNotFoundException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "SynthesisTaskNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "SynthesisTaskNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SynthesisTaskNotFoundException.prototype);
    }
}
exports.SynthesisTaskNotFoundException = SynthesisTaskNotFoundException;
class InvalidLexiconException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidLexiconException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidLexiconException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLexiconException.prototype);
    }
}
exports.InvalidLexiconException = InvalidLexiconException;
class InvalidS3BucketException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidS3BucketException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidS3BucketException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidS3BucketException.prototype);
    }
}
exports.InvalidS3BucketException = InvalidS3BucketException;
class InvalidS3KeyException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidS3KeyException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidS3KeyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidS3KeyException.prototype);
    }
}
exports.InvalidS3KeyException = InvalidS3KeyException;
class InvalidSampleRateException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidSampleRateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSampleRateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSampleRateException.prototype);
    }
}
exports.InvalidSampleRateException = InvalidSampleRateException;
class InvalidSnsTopicArnException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidSnsTopicArnException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSnsTopicArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSnsTopicArnException.prototype);
    }
}
exports.InvalidSnsTopicArnException = InvalidSnsTopicArnException;
class InvalidSsmlException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "InvalidSsmlException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSsmlException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSsmlException.prototype);
    }
}
exports.InvalidSsmlException = InvalidSsmlException;
class LanguageNotSupportedException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "LanguageNotSupportedException",
            $fault: "client",
            ...opts,
        });
        this.name = "LanguageNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LanguageNotSupportedException.prototype);
    }
}
exports.LanguageNotSupportedException = LanguageNotSupportedException;
class LexiconSizeExceededException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "LexiconSizeExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LexiconSizeExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LexiconSizeExceededException.prototype);
    }
}
exports.LexiconSizeExceededException = LexiconSizeExceededException;
class MarksNotSupportedForFormatException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "MarksNotSupportedForFormatException",
            $fault: "client",
            ...opts,
        });
        this.name = "MarksNotSupportedForFormatException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MarksNotSupportedForFormatException.prototype);
    }
}
exports.MarksNotSupportedForFormatException = MarksNotSupportedForFormatException;
class MaxLexemeLengthExceededException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "MaxLexemeLengthExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaxLexemeLengthExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxLexemeLengthExceededException.prototype);
    }
}
exports.MaxLexemeLengthExceededException = MaxLexemeLengthExceededException;
class MaxLexiconsNumberExceededException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "MaxLexiconsNumberExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaxLexiconsNumberExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxLexiconsNumberExceededException.prototype);
    }
}
exports.MaxLexiconsNumberExceededException = MaxLexiconsNumberExceededException;
class UnsupportedPlsAlphabetException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedPlsAlphabetException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedPlsAlphabetException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedPlsAlphabetException.prototype);
    }
}
exports.UnsupportedPlsAlphabetException = UnsupportedPlsAlphabetException;
class UnsupportedPlsLanguageException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedPlsLanguageException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedPlsLanguageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedPlsLanguageException.prototype);
    }
}
exports.UnsupportedPlsLanguageException = UnsupportedPlsLanguageException;
class SsmlMarksNotSupportedForTextTypeException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "SsmlMarksNotSupportedForTextTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "SsmlMarksNotSupportedForTextTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SsmlMarksNotSupportedForTextTypeException.prototype);
    }
}
exports.SsmlMarksNotSupportedForTextTypeException = SsmlMarksNotSupportedForTextTypeException;
class TextLengthExceededException extends PollyServiceException_1.PollyServiceException {
    constructor(opts) {
        super({
            name: "TextLengthExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "TextLengthExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TextLengthExceededException.prototype);
    }
}
exports.TextLengthExceededException = TextLengthExceededException;
const LexiconFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: smithy_client_1.SENSITIVE_STRING }),
});
exports.LexiconFilterSensitiveLog = LexiconFilterSensitiveLog;
const GetLexiconOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Lexicon && { Lexicon: (0, exports.LexiconFilterSensitiveLog)(obj.Lexicon) }),
});
exports.GetLexiconOutputFilterSensitiveLog = GetLexiconOutputFilterSensitiveLog;
const PutLexiconInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: smithy_client_1.SENSITIVE_STRING }),
});
exports.PutLexiconInputFilterSensitiveLog = PutLexiconInputFilterSensitiveLog;
const SynthesizeSpeechOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SynthesizeSpeechOutputFilterSensitiveLog = SynthesizeSpeechOutputFilterSensitiveLog;
